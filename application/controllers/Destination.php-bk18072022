<?php if(!defined('BASEPATH')) exit('No direct script access allowed');

require APPPATH . '/libraries/BaseController.php';

/**
 * Class : Factory (FactoryController)
 * Factory Class to control all factory related operations.
 * @author : OpenXcode
 * @version : 1.1
 * @since : 15 November 2016
 */
class Destination extends BaseController
{
    /**
     * This is default constructor of the class
     */
    public function __construct()
    {
        parent::__construct();
        $this->load->model('destination_model');
        $this->isLoggedIn();
    }
    
    /**
     * This function is used to load the factory list
     */
    function index()
    {
        if(!$this->isAdmin())
        {
            $this->loadThis();
        }
        else
        {        
            $searchText = '';
            $data['records'] = $this->destination_model->destinationListing($searchText, 0, 0); 

            //Roles
            $this->db->select('*');
            $this->db->from('tbl_users');
            $this->db->where('isDeleted', 0);
            $query = $this->db->get();
            $data['userlist'] = $query->result();
            
            $this->global['pageTitle'] = 'Destination Listing';            
            $this->loadViews("destination/destination", $this->global, $data, NULL);
        }
    }

    /**
     * This function is used to load the add new form
     */
    function addNew()
    {
        if(!$this->isAdmin())
        {
            $this->loadThis();
        }
        else
        {
            $this->load->model('destination_model');
            $data['roles'] = $this->destination_model->getDestinationRoles();
            $this->db->select('*');
            $this->db->from('tbl_users');
            $this->db->where('isDeleted', 0);
            $query = $this->db->get();
            $data['userlist'] = $query->result();

            $this->global['pageTitle'] = 'Add New Destination';

            $this->loadViews("destination/addNew", $this->global, $data, NULL);
        }
    }

    /**
     * This function is used to check whether email already exist or not
     */
    function checkEmailExists()
    {
        $dest_id = $this->input->post("dest_id");
        $email = $this->input->post("email");

        if(empty($dest_id)){
            $result = $this->destination_model->checkEmailExists($email);
        } else {
            $result = $this->destination_model->checkEmailExists($email, $dest_id);
        }

        if(empty($result)){ echo("true"); }
        else { echo("false"); }
    }
    
    /**
     * This function is used to add new factory to the system
     */
    function addNewDestination()
    {
        if(!$this->isAdmin())
        {
            $this->loadThis();
        }
        else
        {
            $this->load->library('form_validation');
            
            $this->form_validation->set_rules('dest_name','Destination Name','trim|required|max_length[255]');
            if($this->form_validation->run() == FALSE)
            {
                $this->addNew();
            }
            else
            {
                $dest_name = $this->input->post('dest_name');
                $dest_dest1 = $this->input->post('dest_dest1');
                $dest_dest2 = $this->input->post('dest_dest2');
                $userId = $this->input->post('userId');
                $isAdmin = $this->input->post('isAdmin');
                //$dest = str_pad($id,5,0,STR_PAD_LEFT);
                $destInfo = array('dest_name'=>$dest_name, 'dest_dest1'=>$dest_dest1, 'dest_dest2'=>$dest_dest2,
                        'userId'=> $userId,'createdBy'=>$this->vendorId, 'createdDtm'=>date('Y-m-d H:i:s'));
                $this->load->model('destination_model');
                $result = $this->destination_model->addNewDestination($destInfo);
                if($result > 0){

                    //$dest_code = str_pad($result,5,0,STR_PAD_LEFT);
                    //$this->db->where('dest_id', $result);
                    //$this->db->update('destination_master', array('dest_code'=>$dest_code));

                    $this->session->set_flashdata('success', 'New Destination created successfully');
                } else {
                    $this->session->set_flashdata('error', 'Destination creation failed');
                }
                
                redirect('destination');
            }
        }
    }

    
    /**
     * This function is used load factory edit information
     * @param number $dest_id : Optional : This is factory id
     */
    function editOld($dest_id = NULL)
    {
        if(!$this->isAdmin())
        {
            $this->loadThis();
        }
        else
        {
            
            if($dest_id == null){
                redirect('destination');
            }
            $data['roles'] = $this->destination_model->getDestinationRoles();

            $this->db->select('*');
            $this->db->from('tbl_users');
            $this->db->where('isDeleted', 0);
            $query = $this->db->get();
            $data['userlist'] = $query->result();

            $data['dataInfo'] = $this->destination_model->getDestinationInfo($dest_id);
            $this->global['pageTitle'] = 'Edit Destination';
            $this->loadViews("destination/addNew", $this->global, $data, NULL);

        }
    }

    function log($dest_id = NULL){

        $dest_id = ($dest_id == NULL ? 0 : $dest_id);
        $data["factoryInfo"] = $this->destination_model->getDestinationInfo($dest_id);

        $this->global['pageTitle'] = 'Destination Log History';
        $this->loadViews("destination/loginHistory", $this->global, $data, NULL);    
    }

    
    
    /**
     * This function is used to edit the factory information
     */
    function editDestination()
    {
        if(!$this->isAdmin())
        {
            $this->loadThis();
        }
        else
        {
            $this->load->library('form_validation');
            
            $dest_id = $this->input->post('dest_id');
            $this->form_validation->set_rules('dest_name','Destination Name','trim|required|max_length[255]');
            if($this->form_validation->run() == FALSE){
                $this->editOld($dest_id);
            }else{
                $dest_name = $this->input->post('dest_name');
                $dest_dest1 = $this->input->post('dest_dest1');
                $dest_dest2 = $this->input->post('dest_dest2');
                $userId = $this->input->post('userId');
                //$isAdmin = $this->input->post('isAdmin');
                //$dest = str_pad($id,5,0,STR_PAD_LEFT);

                $destInfo = array('dest_name'=>$dest_name, 'dest_dest1'=>$dest_dest1, 'dest_dest2'=>$dest_dest2,
                        'userId'=> $userId);
                $this->load->model('destination_model');


                $dataInfo = $this->destination_model->getDestinationInfo($dest_id);
                $logs = ($dataInfo->dest_log)?json_decode($dataInfo->dest_log):array();
                $logs[] = array('date' => date('Y-m-d H:i:s'), 'userId' => $this->session->userdata('userId'));
                $destInfo['dest_log'] = json_encode($logs);

                $result = $this->destination_model->editDestination($destInfo, $dest_id);
                if($result == true){
                    $this->session->set_flashdata('success', 'Destination updated successfully');
                }else{
                    $this->session->set_flashdata('error', 'Destination updation failed');
                }
                redirect('destination');

            }
        }
    }


    /**
     * This function is used to delete the factory using dest_id
     * @return boolean $result : TRUE / FALSE
     */
    function deleteDestination()
    {
        if(!$this->isAdmin())
        {
            echo(json_encode(array('status'=>'access')));
        }
        else
        {
            $dest_id = $this->input->post('dest_id');
            //$factoryInfo = array('isDeleted'=>1,'updatedBy'=>$this->vendorId, 'updatedDtm'=>date('Y-m-d H:i:s'));
            
            $result = $this->destination_model->deleteDestination($dest_id);
            
            if ($result > 0) { echo(json_encode(array('status'=>TRUE))); }
            else { echo(json_encode(array('status'=>FALSE))); }
        }
    }
    
    /**
     * Page not found : error 404
     */
    function pageNotFound()
    {
        $this->global['pageTitle'] = '404 - Page Not Found';
        
        $this->loadViews("general/404", $this->global, NULL, NULL);
    }

    /**
     * This function used to show login history
     * @param number $dest_id : This is factory id
     */
    function loginHistoy($dest_id = NULL)
    {
        if(!$this->isAdmin())
        {
            $this->loadThis();
        }
        else
        {
            $dest_id = ($dest_id == NULL ? 0 : $dest_id);

            $searchText = $this->input->post('searchText');
            $fromDate = $this->input->post('fromDate');
            $toDate = $this->input->post('toDate');

            $data["factoryInfo"] = $this->destination_model->getFactoryInfoById($dest_id);

            $data['searchText'] = $searchText;
            $data['fromDate'] = $fromDate;
            $data['toDate'] = $toDate;
            
            $this->load->library('pagination');
            
            $count = $this->destination_model->loginHistoryCount($dest_id, $searchText, $fromDate, $toDate);

            $returns = $this->paginationCompress ( "login-history/".$dest_id."/", $count, 10, 3);

            $data['records'] = $this->destination_model->loginHistory($dest_id, $searchText, $fromDate, $toDate, $returns["page"], $returns["segment"]);
            
            $this->global['pageTitle'] = 'Factory Login History';
            
            $this->loadViews("factorys/loginHistory", $this->global, $data, NULL);
        }        
    }

    /**
     * This function is used to show factorys profile
     */
    function profile($active = "details")
    {
        $data["factoryInfo"] = $this->destination_model->getFactoryInfoWithRole($this->vendorId);
        $data["active"] = $active;
        
        $this->global['pageTitle'] = $active == "details" ? 'My Profile' : 'Change Password';
        $this->loadViews("factorys/profile", $this->global, $data, NULL);
    }

    /**
     * This function is used to update the factory details
     * @param text $active : This is flag to set the active tab
     */
    function profileUpdate($active = "details")
    {
        $this->load->library('form_validation');
            
        $this->form_validation->set_rules('fname','Full Name','trim|required|max_length[128]');
        $this->form_validation->set_rules('mobile','Mobile Number','required|min_length[10]');
        $this->form_validation->set_rules('email','Email','trim|required|valid_email|max_length[128]|callback_emailExists');        
        
        if($this->form_validation->run() == FALSE)
        {
            $this->profile($active);
        }
        else
        {
            $name = ucwords(strtolower($this->security->xss_clean($this->input->post('fname'))));
            $mobile = $this->security->xss_clean($this->input->post('mobile'));
            $email = strtolower($this->security->xss_clean($this->input->post('email')));
            
            $factoryInfo = array('name'=>$name, 'email'=>$email, 'mobile'=>$mobile, 'updatedBy'=>$this->vendorId, 'updatedDtm'=>date('Y-m-d H:i:s'));
            
            $result = $this->destination_model->editFactory($factoryInfo, $this->vendorId);
            
            if($result == true)
            {
                $this->session->set_factorydata('name', $name);
                $this->session->set_flashdata('success', 'Profile updated successfully');
            }
            else
            {
                $this->session->set_flashdata('error', 'Profile updation failed');
            }

            redirect('profile/'.$active);
        }
    }

    /**
     * This function is used to change the password of the factory
     * @param text $active : This is flag to set the active tab
     */
    function changePassword($active = "changepass")
    {
        $this->load->library('form_validation');
        
        $this->form_validation->set_rules('oldPassword','Old password','required|max_length[20]');
        $this->form_validation->set_rules('newPassword','New password','required|max_length[20]');
        $this->form_validation->set_rules('cNewPassword','Confirm new password','required|matches[newPassword]|max_length[20]');
        
        if($this->form_validation->run() == FALSE)
        {
            $this->profile($active);
        }
        else
        {
            $oldPassword = $this->input->post('oldPassword');
            $newPassword = $this->input->post('newPassword');
            
            $resultPas = $this->destination_model->matchOldPassword($this->vendorId, $oldPassword);
            
            if(empty($resultPas))
            {
                $this->session->set_flashdata('nomatch', 'Your old password is not correct');
                redirect('profile/'.$active);
            }
            else
            {
                $factorysData = array('password'=>getHashedPassword($newPassword), 'updatedBy'=>$this->vendorId,
                                'updatedDtm'=>date('Y-m-d H:i:s'));
                
                $result = $this->destination_model->changePassword($this->vendorId, $factorysData);
                
                if($result > 0) { $this->session->set_flashdata('success', 'Password updation successful'); }
                else { $this->session->set_flashdata('error', 'Password updation failed'); }
                
                redirect('profile/'.$active);
            }
        }
    }

    /**
     * This function is used to check whether email already exist or not
     * @param {string} $email : This is factorys email
     */
    function emailExists($email)
    {
        $dest_id = $this->vendorId;
        $return = false;

        if(empty($dest_id)){
            $result = $this->destination_model->checkEmailExists($email);
        } else {
            $result = $this->destination_model->checkEmailExists($email, $dest_id);
        }

        if(empty($result)){ $return = true; }
        else {
            $this->form_validation->set_message('emailExists', 'The {field} already taken');
            $return = false;
        }

        return $return;
    }

    function update(){
        $id = $this->input->post('id');
        $field = $this->security->xss_clean($this->input->post('field'));
        $value = $this->security->xss_clean($this->input->post('val'));

        $this->db->where('dest_id', $id);
        $this->db->update('destination_master', array($field => $value ));
    }
}

?>